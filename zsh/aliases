alias l='ls -lah'
alias ..='cd ..'
alias ...='cd ../..'
alias t='tree -a -L 3 -I ".git|node_modules"'
alias d='cd $HOME/Development'
alias gimme='sudo chown -R $USER:$USER .'
cdl () {
	cd $@
	l
}

alias v='vim'
alias sv='sudo vim'
alias poweroff='sudo shutdown -P now'
alias top='htop'
alias sync='$DOTFILES/tools/sync'
alias paste='xclip -o -selection clipboard 2>/dev/null'
alias p='paste'
alias copy='xclip -i -selection clipboard 2>/dev/null'
alias s='ag -iQ --hidden'
alias screenshot='echo "Making screenshot in 4 seconds.."; scrot -b -d 4 "%Y-%m-%d_%H:%M:%S.png" -e "mv \$f ~/Downloads/"'
music () {
	if [[ "$(ps aux | grep mopidy | wc -l)" -eq 1 ]]; then
		sudo service mopidy start
		sleep 4
	fi
	ncmpcpp
}
alias flushdns='sudo /etc/init.d/networking force-reload'

alias arduino='drx -v /dev/bus/usb:/dev/bus/usb pandrew/arduino arduino'
randpw () {
	length=${1:-24}
	curl -s "https://www.random.org/passwords/?num=100&len=$length&format=plain&rnd=new" | shuf | head -n1 | tr -d '\n'
}

# Git
g () {
	if [[ $# -eq 0 ]]; then
		g s
	else
		hub $*
	fi
}
alias gac='g add -A . && g commit -m'

# Wireless
alias wls='nmcli dev wifi list'
wconnect () {
	echo -n "[wifi] password for $1: "
	read -s PW
	echo
	sudo nmcli dev wifi con "$1" password "$PW"
}
alias wrestart='sudo service network-manager restart'

# Keyboard
swapsuperandalt () {
	# Toggle
	local FLAGS=''
	setxkbmap -query | grep -q 'altwin:swap_alt_win' || FLAGS=('-option' 'altwin:swap_alt_win')

	# For keyboards with: ctrl, super, alt
	setxkbmap -layout us -variant mac -option '' -option caps:escape ${FLAGS[@]}
}

# Docker
alias dcp='docker-compose ps'
alias dcl='docker-compose logs'
dcr () {
	# Docker Compose reset
	docker-compose build $1
	docker-compose kill $1
	docker-compose rm -f $1
	docker-compose up -d $1
}
de () {
	# Docker exec
	[ $# -eq 1 ] && docker exec -it "$1" bash || docker exec -it $@
}
dsa () {
	docker stop $(docker ps -q)
}

php-serve () {
	PHP_PORT=${1:-3000}
	echo "Starting server on localhost:$PHP_PORT.."
	PHP_PORT=$PHP_PORT php -S 0.0.0.0:$PHP_PORT
}
mysql-admin () {
	local name=mysql-admin
	if ! $(docker ps --format '{{.Names}}' | grep -qE "^$name\$"); then
		docker run -d --name "$name" clue/adminer
	else
		docker start "$name"
	fi

	# Update IP in hosts file
	local ip=$(docker inspect --format '{{.NetworkSettings.IPAddress}}' "$name")
	local host="$name.local"
	local updated="$ip      $host"

	if $(cat /etc/hosts | grep -q 'mysql-admin.local'); then
		sudo sed -i "s/^[0-9\. \t]*$host\$/$updated/" /etc/hosts
	else
		echo "$updated" | sudo tee /etc/hosts > /dev/null
	fi
}
1pw () {
	cd ~/Dropbox/1Password/1Password.agilekeychain/
	firefox http://localhost:4000/1Password.html
	php-serve 4000
}
adbserv () {
	docker start adbd || docker run -d --privileged -v /dev/bus/usb:/dev/bus/usb --name adbd sorccu/adb
}
adb () {
	docker run --rm -ti --privileged -v $(pwd):/data --workdir=/data --net container:adbd sorccu/adb adb $@
}
alias aws='docker run --rm -it -v $HOME/.aws:/root/.aws -v $PWD:/data -w /data cgswong/aws aws'
drx () {
	# Run docker with X11 support
	XSOCK=/tmp/.X11-unix
	XAUTH=/tmp/.docker.xauth
	touch $XAUTH
	xauth nlist $DISPLAY | sed -e 's/^..../ffff/' | xauth -f $XAUTH nmerge -
	docker run --rm -it \
		-v $XSOCK:$XSOCK -v $XAUTH:$XAUTH -e XAUTHORITY=$XAUTH \
		-e DISPLAY=unix$DISPLAY \
		-v /etc/localtime:/etc/localtime:ro \
		--device /dev/snd:/dev/snd $@
}

# Transmission
alias tls='transmission-remote -n "transmission:transmission" -l'
alias tadd='transmission-remote -n "transmission:transmission" -a'
trm () {
	transmission-remote -n 'transmission:transmission' -t $@ --remove-and-delete
}
tstop () {
	transmission-remote -n 'transmission:transmission' -t $@ -S
}

# Calculator
# Source: http://askubuntu.com/a/379282/71853
= () {
    calc="${@//p/+}"
    calc="${calc//x/*}"
    echo "$(($calc))"
}

# Shorten
shorten () {
	# TODO: Get token

	local url=$1

	if [ -z "$url" ]; then
		echo 'No URL specified.' 1>&2
		exit 1
	fi

	local result=$(curl \
		https://www.googleapis.com/urlshortener/v1/url \
		-H 'Content-Type: application/json' \
		-d '{"longUrl": "'"$url"'"}' \
		| grep 'id' | awk '{ print $2 }' \
		| tr -d '"' | tr -d ',')

	echo -n $result
}

# Transfer file(s)
transfer () {
	# TODO: If STDIN has data, read and write to textfile, then transfer that
	# TODO: Add option -z to zip given folder/files
	local file
	local filename

	if [ "$1" = "-z" ]; then
		filename=$(basename $(readlink -f $2))
		local zipfile=$(mktemp -t "$filename.XXX.zip")
		rm "$zipfile"
		shift
		shift
		zip -r "$zipfile" $@
		file="$zipfile"
	else
		file="$1"
		filename=$(basename "$file")
	fi

	local tmpfile=$(mktemp -t transfer.XXXXX)
	curl --progress-bar --upload-file "$file" "https://transfer.sh/$filename" >> $tmpfile
	local url=$(cat $tmpfile)
	rm -f $tmpfile

	echo -n $url
}
